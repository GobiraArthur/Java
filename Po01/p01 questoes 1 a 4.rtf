{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1046{\fonttbl{\f0\fnil\fcharset0 Arial;}{\f1\fnil\fcharset2 Symbol;}}
{\*\generator Riched20 10.0.22621}\viewkind4\uc1 
\pard\sl240\slmult1\qj\b\fs22\lang22 1. O que \'e9 uma classe em Java e qual \'e9 a diferen\'e7a entre uma classe e um objeto? D\'ea 5 exemplos mostrando-os em C++ e em Java.\par
\par
\b0 Em Java, uma classe \'e9 uma estrutura que define o comportamento e as propriedades de objetos. Ela \'e9 uma esp\'e9cie de modelo ou planta baixa para criar objetos. Uma classe encapsula dados e m\'e9todos relacionados. Em Java, os objetos s\'e3o inst\'e2ncias de classes.\par
A diferen\'e7a entre classe e objeto \'e9 que uma classe \'e9 uma estrutura que define atributos e m\'e9todos comuns a todos os objetos que podem ser instanciados a partir dessa classe e um objeto \'e9 uma inst\'e2ncia espec\'edfica de uma classe. \'c9 uma entidade real que existe em tempo de execu\'e7\'e3o e tem um estado (atributos) e comportamento (m\'e9todos).\par
\par
Exemplos em C++ e Java:\par
\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sl240\slmult1\qj Exemplo: Carro\par

\pard\sl240\slmult1\qj\par
// C++\par
class Car \{\par
public:\par
    string brand;\par
    int year;\par
    void start() \{\par
        cout << "Car started." << endl;\par
    \}\par
\};\par
// Java\par
public class Car \{\par
    String brand;\par
    int year;\par
    void start() \{\par
        System.out.println("Car started.");\par
    \}\par
\}\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sl240\slmult1\qj Exemplo: Pessoa\par

\pard\sl240\slmult1\qj // C++\par
class Person \{\par
public:\par
    string name;\par
    int age;\par
\};\par
// Java\par
public class Person \{\par
    String name;\par
    int age;\par
\}\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sl240\slmult1\qj Exemplo: Livro\par

\pard\sl240\slmult1\qj // C++\par
class Book \{\par
public:\par
    string title;\par
    string author;\par
\};\par
// Java\par
public class Book \{\par
    String title;\par
    String author;\par
\}\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sl240\slmult1\qj Exemplo: C\'edrculo\par

\pard\sl240\slmult1\qj // C++\par
class Circle \{\par
public:\par
    double radius;\par
    double calculateArea() \{\par
        return 3.14 * radius * radius;\par
    \}\par
\};\par
// Java\par
public class Circle \{\par
    double radius;\par
    double calculateArea() \{\par
        return 3.14 * radius * radius;\par
    \}\par
\}\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sl240\slmult1\qj Exemplo: Conta Banc\'e1ria\par

\pard\sl240\slmult1\qj // C++\par
class BankAccount \{\par
public:\par
    string accountHolder;\par
    double balance;\par
    void deposit(double amount) \{\par
        balance += amount;\par
    \}\par
\};\par
// Java\par
public class BankAccount \{\par
    String accountHolder;\par
    double balance;\par
    void deposit(double amount) \{\par
        balance += amount;\par
    \}\par
\}\par
\b\par
2. Como voc\'ea declara uma vari\'e1vel em Java e quais s\'e3o os tipos de dados\par
primitivos mais comuns? Fa\'e7a um paralelo entre isso e a mesma coisa na\par
linguagem C++\par
\par
\b0 Em Java, voc\'ea declara uma vari\'e1vel especificando o tipo de dado seguido pelo nome da vari\'e1vel. Aqui est\'e1 um exemplo simples de declara\'e7\'e3o de vari\'e1vel em Java:\par
\par
// Declara\'e7\'e3o de vari\'e1vel em Java\par
\par
int numero = 42;\par
String texto = "Ol\'e1, mundo!";\par
double valor = 3.14;\par
\par
Os tipos de dados primitivos mais comuns em Java s\'e3o:\par
\par
int: Representa n\'fameros inteiros.\par
double: Representa n\'fameros de ponto flutuante (dupla precis\'e3o).\par
char: Representa um caractere Unicode.\par
boolean: Representa valores verdadeiro ou falso.\par
byte: Representa n\'fameros inteiros de 8 bits.\par
short: Representa n\'fameros inteiros de 16 bits.\par
long: Representa n\'fameros inteiros longos.\par
float: Representa n\'fameros de ponto flutuante de precis\'e3o simples.\par
\par
Os tipos de dados primitivos s\'e3o semelhantes entre Java e C++, embora a sintaxe para algumas coisas, como strings, seja um pouco diferente. Em C++, a classe std::string \'e9 usada para representar strings, enquanto em Java, a classe String \'e9 usada. Al\'e9m disso, em C++, voc\'ea muitas vezes ver\'e1 std:: antes de tipos padr\'e3o da biblioteca padr\'e3o C++, como std::string e std::cout. Em Java, o uso de java.lang \'e9 impl\'edcito, ent\'e3o voc\'ea n\'e3o precisa especificar isso ao usar tipos padr\'e3o, como String.\par
\b\par
3. Explique o conceito de heran\'e7a em Java e como voc\'ea pode criar uma\par
subclasse a partir de uma classe existente. Fa\'e7a um paralelo com C++,\par
apresentando 5 exemplos.\par
\par
\b0 Em Java, a heran\'e7a \'e9 um conceito fundamental da programa\'e7\'e3o orientada a objetos que permite que uma classe (subclasse) herde atributos e m\'e9todos de outra classe (superclasse). A ideia \'e9 reutilizar o c\'f3digo existente e estabelecer uma rela\'e7\'e3o "\'e9 um" entre as classes. A subclasse herda os membros da superclasse e pode adicionar ou substituir comportamentos conforme necess\'e1rio.\par
\par
Para criar uma subclasse em Java, voc\'ea usa a palavra-chave extends. Aqui est\'e1 um exemplo simples:\par
\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sl240\slmult1\qj // Superclasse\par

\pard\sl240\slmult1\qj class Animal \{\par
    void eat() \{\par
        System.out.println("Animal is eating");\par
    \}\par
\}\par
\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sl240\slmult1\qj // Subclasse\par

\pard\sl240\slmult1\qj class Dog extends Animal \{\par
    void bark() \{\par
        System.out.println("Dog is barking");\par
    \}\par
\}\par
\b\par

\pard\sa200\sl240\slmult1\qj\b0 Em C++, a heran\'e7a \'e9 semelhante ao Java, usando a palavra-chave class para definir classes e : para indicar heran\'e7a. C++ suporta heran\'e7a m\'faltipla e permite diferentes n\'edveis de acesso (p\'fablico, privado, protegido) para membros herdados.\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sl240\slmult1\qj Heran\'e7a Simples:\par

\pard\sl240\slmult1\qj // Superclasse (classe base)\par
class Animal \{\par
    void fazerSom() \{\par
        System.out.println("Algum som gen\'e9rico");\par
    \}\par
\}\par
\par
// Subclasse (classe derivada)\par
class Cachorro extends Animal \{\par
    void fazerSom() \{\par
        System.out.println("Latindo");\par
    \}\par
\}\par
\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sl240\slmult1\qj Heran\'e7a com Construtores:\par

\pard\sl240\slmult1\qj // Superclasse (classe base)\par
class Veiculo \{\par
    int velocidade;\par
\par
    Veiculo(int velocidade) \{\par
        this.velocidade = velocidade;\par
    \}\par
\par
    void acelerar() \{\par
        System.out.println("Acelerando");\par
    \}\par
\}\par
\par
// Subclasse (classe derivada)\par
class Carro extends Veiculo \{\par
    int numPortas;\par
\par
    Carro(int velocidade, int numPortas) \{\par
        super(velocidade);\par
        this.numPortas = numPortas;\par
    \}\par
\par
    void abrirPortas() \{\par
        System.out.println("Abrindo as portas");\par
    \}\par
\}\par
\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sl240\slmult1\qj Heran\'e7a com M\'e9todo Override:\par

\pard\sl240\slmult1\qj // Superclasse (classe base)\par
class Forma \{\par
    void desenhar() \{\par
        System.out.println("Desenhando uma forma");\par
    \}\par
\}\par
\par
// Subclasse (classe derivada)\par
class Circulo extends Forma \{\par
    @Override\par
    void desenhar() \{\par
        System.out.println("Desenhando um c\'edrculo");\par
    \}\par
\}\par
\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sl240\slmult1\qj Heran\'e7a M\'faltipla (Interface):\par

\pard\sl240\slmult1\qj // Interface\par
interface Animal \{\par
    void fazerSom();\par
\}\par
\par
// Superclasse (classe base)\par
class Mamifero implements Animal \{\par
    @Override\par
    public void fazerSom() \{\par
        System.out.println("Som de mam\'edfero");\par
    \}\par
\}\par
\par
// Subclasse (classe derivada)\par
class Cachorro extends Mamifero \{\par
    // Aqui, Cachorro herda indiretamente de Animal atrav\'e9s de Mamifero\par
\}\par
\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sl240\slmult1\qj Heran\'e7a com Classe Abstrata:\par

\pard\sl240\slmult1\qj // Classe Abstrata (pode conter m\'e9todos abstratos e concretos)\par
abstract class Veiculo \{\par
    abstract void acelerar();\par
\}\par
\par
// Subclasse (classe derivada)\par
class Carro extends Veiculo \{\par
    @Override\par
    void acelerar() \{\par
        System.out.println("Acelerando o carro");\par
    \}\par
\}\b\par
4. Quando declaramos uma vari\'e1vel em Java, temos, na verdade, um ponteiro.\par
Em C++ \'e9 diferente. Discorra sobre esse aspecto\par
\par
\b0 Em Java, quando voc\'ea declara uma vari\'e1vel de um tipo de objeto (como uma inst\'e2ncia de uma classe), voc\'ea est\'e1, na verdade, criando uma refer\'eancia para esse objeto. Essa refer\'eancia age de maneira semelhante a um ponteiro em C++, mas h\'e1 algumas diferen\'e7as importantes.\par
\par
Java:\par
\par
// Declara\'e7\'e3o de uma vari\'e1vel de objeto em Java\par
MinhaClasse obj = new MinhaClasse();\par
\par
Neste exemplo, obj \'e9 uma refer\'eancia para um objeto da classe MinhaClasse. Em Java, os objetos s\'e3o sempre acessados por refer\'eancia, e voc\'ea n\'e3o tem acesso direto \'e0 mem\'f3ria.\par
\par
C++:\par
\par
// Declara\'e7\'e3o de um ponteiro em C++\par
MinhaClasse* ptr = new MinhaClasse();\par
\par
Neste exemplo em C++, ptr \'e9 um ponteiro que armazena o endere\'e7o de um objeto da classe MinhaClasse. Em C++, voc\'ea tem mais controle sobre a manipula\'e7\'e3o de ponteiros e pode acessar diretamente a mem\'f3ria onde o objeto est\'e1 armazenado.\par
\par
Principais diferen\'e7as:\par
\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sl240\slmult1\qj     Sem\'e2ntica de Refer\'eancia vs. Ponteiro:\par

\pard\sl240\slmult1\qj         Em Java, voc\'ea lida principalmente com refer\'eancias. As opera\'e7\'f5es em objetos s\'e3o realizadas por meio dessas refer\'eancias, mas voc\'ea n\'e3o tem acesso direto \'e0 mem\'f3ria.\par
        Em C++, voc\'ea pode usar ponteiros para acessar diretamente a mem\'f3ria e manipular objetos.\par
\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sl240\slmult1\qj     Gerenciamento de Mem\'f3ria:\par

\pard\sl240\slmult1\qj         Em Java, o gerenciamento de mem\'f3ria \'e9 feito automaticamente pelo coletor de lixo (garbage collector). N\'e3o \'e9 necess\'e1rio liberar manualmente a mem\'f3ria alocada para objetos.\par
        Em C++, voc\'ea \'e9 respons\'e1vel por liberar a mem\'f3ria alocada dinamicamente usando delete quando n\'e3o precisar mais de um objeto.\par
\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sl240\slmult1\qj     Seguran\'e7a:\par

\pard\sl240\slmult1\qj         Java busca ser mais seguro, evitando acesso direto \'e0 mem\'f3ria. Isso contribui para a preven\'e7\'e3o de erros como vazamentos de mem\'f3ria e corrup\'e7\'e3o de dados.\par
        C++ oferece mais controle, o que pode levar a erros mais facilmente se n\'e3o for gerenciado corretamente.\par
\par
Ambas as abordagens t\'eam vantagens e desvantagens. A abordagem de refer\'eancia em Java \'e9 projetada para fornecer um ambiente mais seguro e evitar certos problemas de gerenciamento de mem\'f3ria associados ao uso de ponteiros em C++. No entanto, essa abordagem tamb\'e9m imp\'f5e algumas limita\'e7\'f5es em termos de flexibilidade e controle direto sobre a mem\'f3ria.\par
\par
\par
}
 